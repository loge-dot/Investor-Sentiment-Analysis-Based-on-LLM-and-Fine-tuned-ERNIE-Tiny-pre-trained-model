# %%
import pandas as pd 
import numpy as np 
import os 
import requests
from tqdm import tqdm
from requests.exceptions import Timeout, JSONDecodeError
from requests.exceptions import HTTPError, RequestException
from openai import OpenAI
import httpx
import random
import re

# %%
df = pd.read_excel("E:\毕业论文\数据\股吧数据\clean\gpt_api_test.xlsx")

# %%
client = OpenAI(
    base_url="https://api.xty.app/v1", 
    api_key="sk-G3emafRXXiGcVSMoB060255d7cBd418281F5E88406B0Cb94",
    http_client=httpx.Client(
        base_url="https://api.xty.app/v1",
        follow_redirects=True,
    ),
)

# %%
def classify_sentiment(text):
    try:
        # 使用 OpenAI 客户端创建聊天完成请求
        completion = client.chat.completions.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "You are a helpful assistant."},
                {"role": "user", "content": f"作为股市情绪分析专家，根据评论文本分类散户情绪，规则为三分类，请直接回复数字：2代表看涨/买入倾向，0代表看跌/卖出倾向，1代表中性或无关。文本内容：{text}"}
            ],
            temperature=0,
            top_p=1,
            max_tokens=1,
        )
        # 提取并返回响应内容
        sentiment_content = completion.choices[0].message.content.strip()
        return sentiment_content
    except Exception as e:
        # 异常处理
        print("发生错误:", e)
        return None

# %%
df = pd.read_excel('E:\毕业论文\数据\股吧数据\clean\gpt_api_data.xlsx')
results_df = pd.DataFrame(columns=['标题', '情感'])
# 逐行处理并保存结果
for index, row in tqdm(df.iterrows(),desc='processing'):
    sentiment = classify_sentiment(row['标题'])
    results_df.loc[len(results_df)] = [row['标题'], sentiment]

    # 可选：每处理一定数量的行后保存一次结果
    if index % 5 == 0:
        results_df.to_csv('gpt_api_test_partial.csv', index=None, encoding='utf_8_sig')

results_df.to_csv('gpt_api_test.csv', index=None, encoding='utf_8_sig')

# %%
def random_prompt(text):
    prompts_list = [
        "帮我增强以下文本，保留其乐观的市场观点和语言风格，只微调用词。重点在于传递相同信息和情绪的同时，确保文本清晰、简洁。",
        "我希望你能重写这段股吧评论，维持原有的积极情绪和语言水平，但稍作用词和句式上的调整。请确保信息和情绪的一致性，同时追求表达的简洁性。",
        "需要你的帮助来优化这段评论。请保持其原始的积极看涨态度和语言模式，并精简表达方式。保证信息和情绪的传达既清晰又简洁。",
        "帮助我改写这段评论，保持乐观的股市观点和用词风格不变，仅调整表述和措辞。请重视让信息和情绪传达得更为清楚和简练。",
        "请求对这段股吧文本进行增强处理。目标是维持其看涨的情绪，只是在表达和用语上做些细微的改动。重要的是要使信息和情绪的表达变得更加清晰与简明。",
        "将这段股吧评论进行文本优化，保持其积极和看涨的基调，对表达和措辞进行适当修改。强调的是，保持信息和情绪的清晰、简洁表达。",
        "我需要对以下文本做些增强，关键是保留原文的看涨情绪。稍微调整用词和表达方式，使信息和情绪的传达更加直白和简练。",
        "对这段股吧评论进行微调，保持其原本的正面和看涨情感，调整一下表达和用词。目的是使得信息和情绪表达更为清楚、精简。",
        "希望你能改写下面的评论，继续维持其看涨的情绪，仅仅是在表述和措辞上进行轻微调整。务求在保持信息和情绪一致的同时，使其更加清晰简洁。",
        "帮忙改进这段股吧评论，关键是保留原文的看涨趋势。只需要在措辞和表达上做些小改动，确保信息和情感的表达既清楚又简短。",
        "我需要你帮助我进行文本增强，保持其看涨情绪，只对表达方式和用词做适度调整，重点是清晰和简洁地传达相同的信息和情绪。",
        "协助调整这段文字，维持其积极的市场态度，仅对句子结构进行适当变化。请保证信息和情绪传达的明确性和简洁性。",
        "在不改变原始看涨情绪的前提下，对以下文本进行微小调整。目标是使信息传递更加流畅和简明。",
        "针对下述股市评论进行文本增强，重点在于保留原有的正面观点，同时简化表达形式。",
        "我需要你重塑这段评论，使其在保持乐观看涨的基础上，对用语进行轻微的改进。确保信息简明扼要。",
        "将这段股吧评论稍作改写，主要保持看涨情绪，只调整措词和语句。重点是信息和情绪的清晰、简洁表达。",
        "请对这段文字进行优化处理。目标是在不改变其原始的看涨意图的情况下，调整表达方式，让信息传达更为精准和简练。",
        "需要您对以下股吧评论进行一定的增强。请保持其看涨的情感和语言风格不变。重点在于清晰和简明地传递相同的信息和情绪。",
        "请对以下股市评论进行细微的文本改进，主要是保留其看涨的积极情绪，对表述方式进行轻微调整。目标是信息的简明扼要。",
        "我希望你对这段文字稍作增强，确保其原有的积极和看涨情绪得以保留。只需调整用词和语句结构，追求清晰简洁的表达。",
        "请你帮助优化这段评论，关键是保持其看涨的观点，同时在表达上做适当调整。请注重让信息和情绪更为直接和简练。",
])
    random_text = random.choice(['评论内容为：','原评论为：','原文：','评论：','待增强文本：','待处理文本：','待优化文本：','这是文本：'])
    random_press = random.choice([
        "仅提供增强后的文本即可。"
        "只回复经过增强的文本。"
        "只需给出改进后的文本。"
        "仅需返回修改过的文本。"
        "只将增强处理过的文本回复。"
        "仅展示调整后的文本。"
        "只要提供被优化的文本。"
        "仅需提供改善后的文本。"
        "只返回加工过的文本。"
        "仅展示经过改良的文本。"]
    chosen_prompt = random.choice(prompts_list)
    return f"{chosen_prompt}。{random_press}。{random_text}{text}'"

# %%
def enhance_text(text, num_version=3):
    enhanced_texts = set()
    attempts = 0
    try:
        while len(enhanced_texts) < num_version and attempts < num_version*2:
            random_phrase0 = random.choice(["股市交易者","股票交易员","财经分析员","财经新闻分析师","股市情感分析专家","十年股民","20年股民","经验丰富的股市投资者","行为金融学者"])
            random_phrase1 = random.choice(
                ["对中国股市的交易术语和情绪类型有深入了解。"
                "熟悉中国股市的交易用语及情感分类。"
                "在中国股市交易术语和情绪划分方面具有专业知识。"
                "深谙中国股市交易词汇及情绪区分。"
                "精于中国股市的交易用词和情绪归类。"
                "对中国股市的交易语言和情感划分有专业掌握。"
                "熟知中国股市交易相关术语以及情绪的分类。"
                "精熟中国股市的交易术语和情感种类。"
                "对中国股票市场的交易术语和情绪判断有透彻理解。"
                "通晓中国股市中的交易表达和情绪类型。"])
            prompt = random_prompt(text)
            completion = client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": f"嘿，你是一位{random_phrase0}，{random_phrase1}。"},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.7,
                top_p=1,
                max_tokens=100,
                presence_penalty=0.6,
                frequency_penalty=0.6
            )
            enhanced_text = completion.choices[0].message.content.strip()
            if enhanced_text not in enhanced_texts:
                enhanced_texts.add(enhanced_text)
            else:
                continue
            attempts += 1
        return list(enhanced_texts)
    except Exception as e:
        print("发生错误:", e)
        return None


# %%
df_enhance = pd.read_excel(r"E:\毕业论文\数据\股吧数据\clean\gpt处理\positive_data.xlsx")
for index, row in tqdm(df_enhance.iterrows(), desc='processing'):
    original_text = row['标题']
    try:
        enhance_texts = enhance_text(original_text)
        for i, text in enumerate(enhance_texts):
            df_enhance.at[index, f'enhanced_text_{i+1}'] = text

        if index % 10 == 0:
            df_enhance.to_csv('positive_all_partial1.csv', index=None, encoding='utf_8_sig')
    except Exception as e:
        print(f"An error occurred at index {index}: {e}")
df_enhance.to_csv('positive_all.csv', index=None, encoding='utf_8_sig')

# %%
df_enhance_after = pd.read_csv(r"E:\毕业论文\数据\股吧数据\clean\gpt处理\positive_all.csv")

# %%
def remove_emojis(text):
    # 定义表情符号的模式
    emoji_pattern = re.compile(
        "["
        "\U0001F300-\U0001F5FF"  # 符号 & 画图表情
        "\U0001F600-\U0001F64F"  # 表情符号
        "\U0001F680-\U0001F6FF"  # 交通 & 地图符号
        "\U0001F700-\U0001F77F"  # 阿尔化学符号
        "\U0001F780-\U0001F7FF"  # 几何图形扩展
        "\U0001F800-\U0001F8FF"  # 增补箭头-C
        "\U0001F900-\U0001F9FF"  # 补充符号和图片
        "\U0001FA00-\U0001FA6F"  # 棋类游戏符号
        "\U0001FA70-\U0001FAFF"  # 健身和运动
        "]+", flags=re.UNICODE
    )
    return emoji_pattern.sub(r'', text)
df_enhance_after['标题'] = df_enhance_after['标题'].str.replace('评论：', '', regex=False)
df_enhance_after['enhanced_text_1'] = df_enhance_after['enhanced_text_1'].str.replace('评论：', '', regex=False)
df_enhance_after['enhanced_text_2'] = df_enhance_after['enhanced_text_2'].str.replace('评论：', '', regex=False)
df_enhance_after['enhanced_text_3'] = df_enhance_after['enhanced_text_3'].str.replace('评论：', '', regex=False)
df_enhance_after['标题'] = df_enhance_after['标题'].apply(remove_emojis)
df_enhance_after['enhanced_text_1'] = df_enhance_after['enhanced_text_1'].apply(remove_emojis)
df_enhance_after['enhanced_text_2'] = df_enhance_after['enhanced_text_2'].apply(remove_emojis)
df_enhance_after['enhanced_text_3'] = df_enhance_after['enhanced_text_3'].apply(remove_emojis)


# %%
df_enhance_after.to_csv('positive_all.csv', index=None, encoding='utf_8_sig')

# %%
positive_all  = pd.read_csv(r"E:\毕业论文\数据\股吧数据\clean\gpt处理\positive_all.csv")

# %%
list1 = positive_all['标题'].tolist()
list2 = positive_all['enhanced_text_1'].tolist()
list3 = positive_all['enhanced_text_2'].tolist()
list4 = positive_all['enhanced_text_3'].tolist()
list_all = list1 + list2 + list3 + list4 
list_all = [item for item in list_all if item is not None]
positive_all_data = pd.DataFrame(list_all)
positive_all_data['情感'] = 2 
positive_all_data = positive_all_data.dropna()
positive_all_data.columns = ['标题','情感']

# %%
data_last = pd.read_excel(r"E:\毕业论文\数据\股吧数据\clean\data_last.xlsx")
data_train_last = data_last[data_last['情感']==0 | (data_last['情感'] == 1)]
data_train_last = pd.concat([data_train_last,positive_all_data],ignore_index=True)
data_train_last = data_train_last.sample(frac=1).reset_index(drop=True)
data_train_last.to_csv('data_train_last.csv',index=None, encoding='utf_8_sig')

# %%
sample_2 = data_train_last[data_train_last['情感']==0].shape[0]
sample_0 = data_train_last[data_train_last['情感']==1].sample(sample_2)
sample_1 = data_train_last[data_train_last['情感']==2].sample(sample_2)
data_train_last_balanced = pd.concat([sample_0,sample_1,data_train_last[data_train_last['情感']==0]])
data_train_last_balanced = data_train_last_balanced.sample(frac=1).reset_index(drop=True)
data_train_last_balanced.to_csv("data_train_last_balanced.csv",index=None,encoding='utf_8_sig')

# %%
sample_two_0 = data_train_last[data_train_last['情感']==0].shape[0]
sample_two_2 = data_train_last[data_train_last['情感']==1].sample(sample_two_0)
data_train_two_balanced = pd.concat([sample_two_2,data_train_last[data_train_last['情感']==0]])
data_train_two_balanced = data_train_two_balanced.sample(frac=1).reset_index(drop=True)
data_train_two_balanced.to_csv("data_train_two_balanced.csv",index=None,encoding='utf_8_sig')


