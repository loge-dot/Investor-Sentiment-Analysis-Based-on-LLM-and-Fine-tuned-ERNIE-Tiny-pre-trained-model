# %%
import pandas as pd 
import numpy as np
import os
from tqdm import tqdm
import matplotlib.pyplot as plt

# %%
def concat_files_in_folder(folder_path):
    """
    将指定文件夹中符合特定格式的Excel文件拼接成一个DataFrame

    参数：
    folder_path: str 文件夹路径

    返回：
    combined_df: DataFrame 拼接后的DataFrame
    """
    # 获取文件夹中的所有文件
    files = os.listdir(folder_path)
    # 初始化一个空列表来存储所有文件的DataFrame
    dfs = []
    # 遍历文件夹中的每个文件
    for file in tqdm(files):
        # 确保文件是Excel文件并且文件名符合特定格式
        if file.endswith('.xlsx') and '上市公司股吧帖子统计（自然日）' in file:
            # 读取Excel文件并将其添加到DataFrame列表中
            df = pd.read_excel(os.path.join(folder_path, file))
            dfs.append(df)
    # 使用pandas.concat()函数将所有DataFrame拼接成一个DataFrame
    combined_df = pd.concat(dfs, ignore_index=True)
    return combined_df
folder_path = 'E:\毕业论文\数据\东方财富网帖子\情绪指标数据'
result_df = concat_files_in_folder(folder_path)
print(result_df)

# %%
result_df = pd.read_csv('data_basic.csv',dtype={'Scode':str})

# %%
result_df

# %%
df0 = result_df[ ~ result_df['Date'].str.contains('统计日期')]
df0

# %%
"""
Cell generated by Data Wrangler.
"""
def clean_data(df0):
    # Change column type to string for column: 'Scode'
    df0 = df0.astype({'Scode': 'string'})
    # Change column type to string for column: 'Coname'
    df0 = df0.astype({'Coname': 'string'})
    # Change column type to datetime64[ns] for column: 'Date'
    df0 = df0.astype({'Date': 'datetime64[ns]'})
    # Change column type to int32 for columns: 'Tpostnum', 'Pospostnum' and 4 other columns
    df0 = df0.astype({'Tpostnum': 'int32', 'Pospostnum': 'int32', 'Negpostnum': 'int32', 'Neupostnum': 'int32', 'Readnum': 'int32', 'Commentnum': 'int32'})
    return df0

df0_clean = clean_data(df0.copy())
df0_clean.head()

# %%
sz_50 = [
    "600000", "600028", "600036", "600104", "600309", "600547", "600588", "600745",
    "600887", "601012", "601138", "601288", "601398", "601668", "601857", "601995",
    "603501", "600436", "600030", "600048", "600196", "600438", "600570", "600690",
    "600809", "600893", "601066", "601166", "601318", "601601", "601688", "601888",
    "603259", "603986", "600900", "600031", "600050", "600276", "600519", "600585",
    "601633", "600837", "601728", "601088", "601211", "601336", "601628", "601919",
    "601899", "603288"
]

sz_50_df = df0_clean[df0_clean['Scode'].isin(sz_50)]
sz_50_df.to_csv('sz_50.csv',index=False)

# %%
sz_50_df.reset_index(inplace=True)

# %%
sz_50_df.to_csv('sz_50.csv',index=False)

# %%
sz_50_df.head()

# %%
sz_50_df = pd.read_csv('sz_50_df')
sz_50_df

# %%
#构建情绪指标，投资者关注度和意见趋同指标
sz_50_df['Senti'] = (sz_50_df['Pospostnum'] - sz_50_df['Negpostnum']) / (sz_50_df['Pospostnum'] + sz_50_df['Negpostnum'])
sz_50_df['MsgSenti'] = np.log((1+sz_50_df['Pospostnum'])/(1+sz_50_df['Negpostnum']))
sz_50_df['Concern'] = np.log(1+sz_50_df['Tpostnum'])
sz_50_df['Agree'] = 1 - np.sqrt(1-sz_50_df['Senti']**2)
sz_50_df['CommConcern'] = np.log(1+sz_50_df['Commentnum'])
sz_50_df['ReadConcern'] = np.log(1+sz_50_df['Readnum'])
sz_50_df['MegaConcern'] = np.log((1+sz_50_df['Commentnum'])*sz_50_df['Readnum'])
sz_50_df

# %%
# 填补缺失值
sz_50_df.fillna(value=0,inplace=True)
sz_50_df

# %%
sz_50_df = pd.read_csv('sz_50_df')

# %%
import re
sz_huanshou = pd.read_excel('其他数据\日换手率.xlsx')
sz_trade = pd.read_excel('其他数据\日频股票数据.xlsx')
sz_return = pd.read_excel('其他数据\日收益率.xlsx')
sz_BM = pd.read_excel('其他数据\账面市值比季度数据.xlsx')
sz_EPS = pd.read_excel('其他数据\EPS季度数据.xlsx')
sz_PE_PB = pd.read_excel('其他数据\市盈率市净率.xlsx')
sz_uncertain = pd.read_excel("E:\毕业论文\数据\RERR_ChinaEPUIndexM.xlsx")
sz_roe = pd.read_excel(r"其他数据\roe.xlsx")

# %%
sz_days = sz_return.merge(sz_huanshou, on=['Stkcd','Trddt'], how='left')
sz_days = sz_days.merge(sz_trade, on=['Stkcd','Trddt'], how='left')
sz_days = sz_days.merge(sz_PE_PB, on=['Stkcd','Trddt'], how='left')
sz_days

# %%
sz_BM = sz_BM.merge(sz_EPS,how='left',on=['Accper','Stkcd'])
sz_season = sz_BM.merge(sz_roe,how='left',on=['Accper','Stkcd'])
sz_season.drop(columns=['ShortName_x','ShortName_y'],inplace=True)
sz_season.rename(columns={'Accper':'Trddt'},inplace=True)
sz_season.drop(columns=['ShortName'],inplace=True)
sz_season

# %%
sz_control = sz_days.merge(sz_season,how='left',on=['Stkcd','Trddt'])
sz_control = sz_control.rename(columns={'Trddt':'Date'})
sz_control.to_csv()

# %%
sz_control['Month'] = pd.to_datetime(sz_control['Date']).dt.to_period('M').astype(str)
sz_uncertain['Date'] = sz_uncertain['Date'].astype(str)
merged_df = pd.merge(sz_control, sz_uncertain, left_on='Month', right_on='Date', how='left')
merged_df = merged_df.drop(columns=['Date_y','Month'])
merged_df.rename(columns={'Date_x':'Date'},inplace=True)
merged_df

# %%
merged_df['B/M'] = merged_df['B/M'].interpolate()
merged_df['EPS'] = merged_df['EPS'].interpolate()
merged_df['Roe'] = merged_df['Roe'].interpolate()
merged_df[['B/M','EPS']] = merged_df[['B/M','EPS']].bfill()
merged_df.rename(columns={'Trddt':'Date'},inplace=True)
merged_df.rename(columns={'Stkcd':'Scode'},inplace=True)
merged_df.rename(columns={'index':'Uncertain'},inplace=True)

# %%
sz_all = merged_df.merge(sz_50_df,how='left',on=['Scode','Date'])
sz_all

# %%
sz_all.to_csv('E:\毕业论文\数据\东方财富网帖子\sz_all_1.csv',index=0)

# %%



